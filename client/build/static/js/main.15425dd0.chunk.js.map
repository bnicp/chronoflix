{"version":3,"sources":["components/Navbar.js","components/LoginForm.js","components/SignupForm.js","assets/cf_logo.png","components/NewGame.js","App.js","index.js"],"names":["Navbar","state","activeItem","handleItemClick","e","name","setState","this","Segment","inverted","Menu","pointing","secondary","Item","active","onClick","Component","LoginForm","Form","Field","placeholder","Button","color","SignupForm","NewGame","className","Image","src","cf_logo","id","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAGqBA,E,4MACnBC,MAAQ,CAAEC,WAAY,Q,EAEtBC,gBAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAiB,EAAKC,SAAS,CAAEJ,WAAYG,GAA7C,E,4CAElB,WACE,IAAQH,EAAeK,KAAKN,MAApBC,WAER,OACE,cAACM,EAAA,EAAD,CAASC,UAAQ,EAAjB,SACE,eAACC,EAAA,EAAD,CAAMD,UAAQ,EAACE,UAAQ,EAACC,WAAS,EAAjC,UACE,cAACF,EAAA,EAAKG,KAAN,CACER,KAAK,OACLS,OAAuB,SAAfZ,EACRa,QAASR,KAAKJ,kBAEhB,cAACO,EAAA,EAAKG,KAAN,CACER,KAAK,WACLS,OAAuB,aAAfZ,EACRa,QAASR,KAAKJ,kBAEhB,cAACO,EAAA,EAAKG,KAAN,CACER,KAAK,UACLS,OAAuB,YAAfZ,EACRa,QAASR,KAAKJ,sBAKvB,K,GA7BiCa,a,2BCgBrBC,EAhBG,kBAChB,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,WACE,6CACA,uBAAOC,YAAY,gBAErB,eAACF,EAAA,EAAKC,MAAN,WACE,6CACA,uBAAOC,YAAY,gBAErB,cAACC,EAAA,EAAD,CAAQZ,UAAQ,EAACa,MAAM,MAAvB,sBAVc,ECkJHC,G,cA7II,WA4CjB,OACE,eAACL,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,WACE,0CACA,uBAAOC,YAAY,aAErB,eAACF,EAAA,EAAKC,MAAN,WACE,6CACA,uBAAOC,YAAY,gBAErB,eAACF,EAAA,EAAKC,MAAN,WACE,6CACA,uBAAOC,YAAY,gBAErB,cAACC,EAAA,EAAD,CAAQZ,UAAQ,EAACa,MAAM,MAAvB,sBAiFL,G,SCnJc,MAA0B,oCC6B1BE,EAzBC,kBACd,qCACE,qBAAKC,UAAU,OAAf,SACE,cAACC,EAAA,EAAD,CAAOC,IAAKC,MAEd,sBAAKH,UAAU,WAAf,UACE,qBAAKA,UAAU,YAAf,SACE,cAACJ,EAAA,EAAD,CAAQI,UAAU,oBAAoBI,GAAG,mBAAzC,wBAIF,qBAAKJ,UAAU,YAAf,SACE,cAACJ,EAAA,EAAD,CAAQI,UAAU,oBAAoBI,GAAG,mBAAzC,0BAIF,qBAAKJ,UAAU,YAAf,SACE,cAACJ,EAAA,EAAD,CAAQI,UAAU,oBAAoBI,GAAG,iBAAzC,gCAjBQ,ECWVC,EAAWC,YAAe,CAC9BC,IAAK,aAGDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAE1BC,EAAQC,aAAaC,QAAQ,YAEnC,MAAO,CACLH,QAAQ,2BACHA,GADE,IAELI,cAAeH,EAAK,iBAAaA,GAAU,KAGhD,IAEKI,EAAS,IAAIC,IAAa,CAC9BC,KAAMV,EAASW,OAAOd,GACtBe,MAAO,IAAIC,MAwBEC,MArBf,WACE,OACE,cAACC,EAAA,EAAD,CAAgBP,OAAQA,EAAxB,SACE,cAAC,IAAD,UACE,qCACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOQ,KAAK,WAAWC,QAAS,cAAC,EAAD,MAChC,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAC,EAAD,MAC9B,cAAC,IAAD,CAAOD,KAAK,UAAUC,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CACED,KAAK,IACLC,QAAS,oBAAIzB,UAAU,YAAd,oCAOtB,ECjDD0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,Q","file":"static/js/main.15425dd0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Menu, Segment } from \"semantic-ui-react\";\n\nexport default class Navbar extends Component {\n  state = { activeItem: \"home\" };\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\n\n  render() {\n    const { activeItem } = this.state;\n\n    return (\n      <Segment inverted>\n        <Menu inverted pointing secondary>\n          <Menu.Item\n            name=\"home\"\n            active={activeItem === \"home\"}\n            onClick={this.handleItemClick}\n          />\n          <Menu.Item\n            name=\"messages\"\n            active={activeItem === \"messages\"}\n            onClick={this.handleItemClick}\n          />\n          <Menu.Item\n            name=\"friends\"\n            active={activeItem === \"friends\"}\n            onClick={this.handleItemClick}\n          />\n        </Menu>\n      </Segment>\n    );\n  }\n}\n","import React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\n\nconst LoginForm = () => (\n  <Form>\n    <Form.Field>\n      <label>Username</label>\n      <input placeholder=\"Username\" />\n    </Form.Field>\n    <Form.Field>\n      <label>Password</label>\n      <input placeholder=\"Password\" />\n    </Form.Field>\n    <Button inverted color=\"red\">\n      Submit\n    </Button>\n  </Form>\n);\n\nexport default LoginForm;\n","// import React, { useState } from \"react\";\nimport React from \"react\";\n// import { useMutation } from \"@apollo/client\";\n// import { Form, Button, Alert } from \"react-bootstrap\";\nimport { Button, Form } from \"semantic-ui-react\";\n// import { ADD_USER } from \"../utils/mutations\";\n// import Auth from \"../utils/auth\";\n\nconst SignupForm = () => {\n  // set initial form state\n  // const [userFormData, setUserFormData] = useState({\n  //   username: \"\",\n  //   email: \"\",\n  //   password: \"\",\n  // });\n  // // set state for form validation\n  // const [validated] = useState(false);\n  // // set state for alert\n  // const [showAlert, setShowAlert] = useState(false);\n  // const [addUser, { error }] = useMutation(ADD_USER);\n\n  // const handleInputChange = (event) => {\n  //   const { name, value } = event.target;\n  //   setUserFormData({ ...userFormData, [name]: value });\n  // };\n\n  const handleFormSubmit = async (event) => {\n    // event.preventDefault();\n    // // check if form has everything (as per react-bootstrap docs)\n    // const form = event.currentTarget;\n    // if (form.checkValidity() === false) {\n    //   event.preventDefault();\n    //   event.stopPropagation();\n    // }\n    // try {\n    //   const response = await addUser({ variables: { ...userFormData } });\n    //   if (!response.data.addUser) {\n    //     throw new Error(\"something went wrong!\");\n    //   }\n    //   const { token, user } = response.data.addUser;\n    //   Auth.login(token);\n    // } catch (err) {\n    //   console.error(err);\n    //   setShowAlert(true);\n    // }\n    // setUserFormData({\n    //   username: \"\",\n    //   email: \"\",\n    //   password: \"\",\n    // });\n  };\n\n  return (\n    <Form>\n      <Form.Field>\n        <label>Email</label>\n        <input placeholder=\"Email\" />\n      </Form.Field>\n      <Form.Field>\n        <label>Username</label>\n        <input placeholder=\"Username\" />\n      </Form.Field>\n      <Form.Field>\n        <label>Password</label>\n        <input placeholder=\"Password\" />\n      </Form.Field>\n      <Button inverted color=\"red\">\n        Submit\n      </Button>\n    </Form>\n  );\n\n  // return (\n  //   <>\n  //     {/* This is needed for the validation functionality above */}\n  //     {/*validated={validated} */}\n  //     <Form noValidate onSubmit={handleFormSubmit}>\n  //       {/* show alert if server response is bad */}\n  //       <Alert\n  //         dismissible\n  //         // onClose={() => setShowAlert(false)}\n  //         // show={showAlert}\n  //         variant=\"danger\"\n  //       >\n  //         Something went wrong with your signup!\n  //       </Alert>\n\n  //       <Form.Group>\n  //         <Form.Label htmlFor=\"username\">Username</Form.Label>\n  //         {/* <Form.Control\n  //           type=\"text\"\n  //           placeholder=\"Your username\"\n  //           name=\"username\"\n  //           onChange={handleInputChange}\n  //           value={userFormData.username}\n  //           required\n  //         /> */}\n  //         <Form.Control.Feedback type=\"invalid\">\n  //           Username is required!\n  //         </Form.Control.Feedback>\n  //       </Form.Group>\n\n  //       <Form.Group>\n  //         <Form.Label htmlFor=\"email\">Email</Form.Label>\n  //         <Form.Control\n  //           type=\"email\"\n  //           placeholder=\"Your email address\"\n  //           name=\"email\"\n  //           // onChange={handleInputChange}\n  //           // value={userFormData.email}\n  //           required\n  //         />\n  //         <Form.Control.Feedback type=\"invalid\">\n  //           Email is required!\n  //         </Form.Control.Feedback>\n  //       </Form.Group>\n\n  //       <Form.Group>\n  //         <Form.Label htmlFor=\"password\">Password</Form.Label>\n  //         <Form.Control\n  //           type=\"password\"\n  //           placeholder=\"Your password\"\n  //           name=\"password\"\n  //           // onChange={handleInputChange}\n  //           // value={userFormData.password}\n  //           required\n  //         />\n  //         <Form.Control.Feedback type=\"invalid\">\n  //           Password is required!\n  //         </Form.Control.Feedback>\n  //       </Form.Group>\n  //       <Button\n  //         // disabled={\n  //         //   !(\n  //         //     userFormData.username &&\n  //         //     userFormData.email &&\n  //         //     userFormData.password\n  //         //   )\n  //         // }\n  //         type=\"submit\"\n  //         variant=\"success\"\n  //       >\n  //         Submit\n  //       </Button>\n  //     </Form>\n  //   </>\n  // );\n};\n\nexport default SignupForm;\n","export default __webpack_public_path__ + \"static/media/cf_logo.dee68cf4.png\";","import React from \"react\";\nimport { Button, Image, Segment } from \"semantic-ui-react\";\nimport cf_logo from \"../assets/cf_logo.png\";\n\nconst NewGame = () => (\n  <>\n    <div className=\"logo\">\n      <Image src={cf_logo} />\n    </div>\n    <div className=\"new-game\">\n      <div className=\"selection\">\n        <Button className=\"massive ui button\" id=\"orange-overwrite\">\n          NEW GAME\n        </Button>\n      </div>\n      <div className=\"selection\">\n        <Button className=\"massive ui button\" id=\"yellow-overwrite\">\n          DIFFICULTY\n        </Button>\n      </div>\n      <div className=\"selection\">\n        <Button className=\"massive ui button\" id=\"pink-overwrite\">\n          HIGH SCORES\n        </Button>\n      </div>\n    </div>\n  </>\n);\n\nexport default NewGame;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport Navbar from \"./components/Navbar\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport LoginForm from \"./components/LoginForm\";\nimport SignupForm from \"./components/SignupForm\";\nimport NewGame from \"./components/NewGame\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"id_token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Routes>\n            <Route path=\"/newgame\" element={<NewGame />} />\n            <Route path=\"/login\" element={<LoginForm />} />\n            <Route path=\"/signup\" element={<SignupForm />} />\n            <Route\n              path=\"*\"\n              element={<h1 className=\"display-2\">Wrong page!</h1>}\n            />\n          </Routes>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}