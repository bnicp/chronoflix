{"version":3,"sources":["utils/auth.js","components/SignupForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","localStorage","removeItem","err","getItem","idToken","setItem","window","location","assign","SignupForm","handleFormSubmit","event","Form","noValidate","onSubmit","Alert","dismissible","variant","Group","Label","htmlFor","Control","Feedback","type","placeholder","name","required","Button","AppNavbar","useState","showModal","setShowModal","Navbar","bg","expand","Container","fluid","Brand","as","Link","to","Toggle","Collapse","id","Nav","className","Auth","loggedIn","onClick","logout","Modal","size","show","onHide","Tab","defaultActiveKey","Header","closeButton","Title","Item","eventKey","Body","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d498553e.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from \"jwt-decode\";\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        localStorage.removeItem(\"id_token\");\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem(\"id_token\");\n    // this will reload the page and reset the state of the application\n    window.location.assign(\"/\");\n  }\n}\n\nexport default new AuthService();\n","// import React, { useState } from \"react\";\nimport React, { useState } from \"react\";\n// import { useMutation } from \"@apollo/client\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n// import { ADD_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nconst SignupForm = () => {\n  // set initial form state\n  // const [userFormData, setUserFormData] = useState({\n  //   username: \"\",\n  //   email: \"\",\n  //   password: \"\",\n  // });\n  // // set state for form validation\n  // const [validated] = useState(false);\n  // // set state for alert\n  // const [showAlert, setShowAlert] = useState(false);\n  // const [addUser, { error }] = useMutation(ADD_USER);\n\n  // const handleInputChange = (event) => {\n  //   const { name, value } = event.target;\n  //   setUserFormData({ ...userFormData, [name]: value });\n  // };\n\n  const handleFormSubmit = async (event) => {\n    // event.preventDefault();\n    // // check if form has everything (as per react-bootstrap docs)\n    // const form = event.currentTarget;\n    // if (form.checkValidity() === false) {\n    //   event.preventDefault();\n    //   event.stopPropagation();\n    // }\n    // try {\n    //   const response = await addUser({ variables: { ...userFormData } });\n    //   if (!response.data.addUser) {\n    //     throw new Error(\"something went wrong!\");\n    //   }\n    //   const { token, user } = response.data.addUser;\n    //   Auth.login(token);\n    // } catch (err) {\n    //   console.error(err);\n    //   setShowAlert(true);\n    // }\n    // setUserFormData({\n    //   username: \"\",\n    //   email: \"\",\n    //   password: \"\",\n    // });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      {/*validated={validated} */}\n      <Form noValidate onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          // onClose={() => setShowAlert(false)}\n          // show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          {/* <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          /> */}\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            // onChange={handleInputChange}\n            // value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            // onChange={handleInputChange}\n            // value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          // disabled={\n          //   !(\n          //     userFormData.username &&\n          //     userFormData.email &&\n          //     userFormData.password\n          //   )\n          // }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Modal, Tab } from \"react-bootstrap\";\nimport SignUpForm from \"./SignupForm\";\n\nimport Auth from \"../utils/auth\";\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Container fluid>\n          <Navbar.Brand as={Link} to=\"/\">\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link as={Link} to=\"/\">\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to=\"/saved\">\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>\n                  Login/Sign Up\n                </Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size=\"lg\"\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby=\"signup-modal\"\n      >\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey=\"login\">\n          <Modal.Header closeButton>\n            <Modal.Title id=\"signup-modal\">\n              <Nav variant=\"pills\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"login\">Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"signup\">Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              {/* <Tab.Pane eventKey=\"login\">\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane> */}\n              <Tab.Pane eventKey=\"signup\">\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport Navbar from \"./components/Navbar\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"id_token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Routes>\n            <Route\n              path=\"*\"\n              element={<h1 className=\"display-2\">Wrong page!</h1>}\n            />\n          </Routes>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Navbar from \"./components/Navbar\";\nimport SignupForm from \"./components/SignupForm\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}